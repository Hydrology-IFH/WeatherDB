[database]
; These are the main database settings
; The database is created with the cli command create-db-schema or the weatherdb.Broker().create_db_schema() method
; you can define multiple database connections by adding a new section like [database.connection_name], where you can define your connection name
; The connection setting defines which connection is used if not specified
connection = main

[database:main]
; setup a database connection
; The password should not be stored in the config file, as it is a security risk.
; the module will ask for the password on first execution and store it in the keyring.
HOST = localhost
PORT = 5432
DATABASE = weatherdb
USER = weatherdb_user

[database:owner]
; You can setup multiple database connections
HOST = localhost
PORT = 5432
DATABASE = weatherdb
USER = weatherdb_owner

[logging]
; The logging settings
; Should the log be written to a file or to the console
; Possible values: file, console
HANDLERS =

; The log level
; Possible values: DEBUG, INFO, WARNING, ERROR, CRITICAL
LEVEL = DEBUG

; The log directory
; The path can contain the module path as basis with ${main:module_path} or the complete path.
; if the log should be written to the console, this setting is ignored
DIRECTORY = ${main:module_path}/logs

; The log file template
; The log file will be named with the template and rotated daily with the date appended
; The template can contain the computer host name with {host} and the current user name with {user}
FILE = weatherDB_{host}_{user}.log

; Should the older rotated log files be compressed or not?
; Possible values: True, False
; The default is True
COMPRESSION = True

; The log file format
; The format can contain the following variables:
; {asctime} - the time of the log entry
; {name} - the name of the logger
; {levelname} - the log level
; {message} - the log message
FORMAT = %(asctime)s - %(name)s - %(levelname)s - %(message)s

[data]
; The WeatherDB module needs several data files to work properly.
; those files are only used by the main managing module, not by the users.

; The data files like multi annual and dems rasters are normaly stored in the data directory.
; The path can contain the module path as basis with ${main:module_path} or the complete path.
; if they are stored somewhere else set the path here
BASE_DIR = ${main:module_path}/data

[data:rasters]
; Digital elevation models (DEM)
; The paths can contain the module path as basis with ${main:module_path} or the DATA.BASE_DIR with ${data:BASE_DIR} or the complete path.
; The module needs at least one DEM to calculate the horizon shadowing angle.
; as finer DEM are sometimes not covering the whole area of germany+40km, that is needed, you can add additional DEMs, that gets used if the first one
; the DEMs are used in the order of appearance in the list
DEMS = ${data:BASE_DIR}/DEM/DEM25.tif,
       ${data:BASE_DIR}/DEM/DEM80.tif

; Regionalisation Rasters
; the module works with regionalised multi-annual rasters from the DWD
; the module needs at least the HYRAS and DWD raster, as this is the basis for the regionalisation of the station data
; The rasters should be in a cartesian coordinate system with meter as unit to be able to calculate distances (e.g. EPSG:3035)

[data:rasters:hyras]
; multi annual HYRAS raster
; The original data can be found on: https://opendata.dwd.de/climate_environment/CDC/grids_germany/multi_annual/hyras_de/precipitation/
; to get better results, we refined the 1km rasters to 25m raster, based on a DEM25. (this file is not providen, but can be asked for)
FILE = ${data:BASE_DIR}/regionalisation/HYRAS_ma_1991_2020_DGM25.tif

; This raster file should have at least 3 raster bands for summer, winter and yearly means.
; Give the rasters names or band numbers
BAND_P_WIHY = n_hyras_wihj
BAND_P_SUHY = n_hyras_sohj
BAND_P_YEAR = n_hyras_year

; The EPSG code of the rasters if not defined in the raster file itself
SRID = 3035

; factors to apply to raster value to get to mm or °C
; the rasters should be in integer format, as the factors are applied to the raster values to get decimal values
FACTOR_P_WIHY = 1
FACTOR_P_SUHY = 1
FACTOR_P_YEAR = 1

[data:rasters:dwd]
; multi annual DWD raster
FILE = ${data:BASE_DIR}/regionalisation/DWD-grid_ma_1991_2020_DGM25.tif
BAND_P_WIHY = n_wihj
BAND_P_SUHY = n_sohj
BAND_P_YEAR = n_year
BAND_T_YEAR = t_year
BAND_ET_YEAR = et_year

; The EPSG code of the rasters if not defined in the raster file itself
SRID = 3035

; factors to apply to raster value to get to mm or °C
; the rasters should be in integer format, as the factors are applied to the raster values to get decimal values
FACTOR_P_WIHY = 1
FACTOR_P_SUHY = 1
FACTOR_P_YEAR = 1
FACTOR_T_YEAR = 0.1
FACTOR_ET_YEAR = 1

[weatherdb]
; The WeatherDB module settings to setup different parts of the module

; The radius in meters to use for the horizon shadowing calculation
; The default is 75km, this value got defined because the maximum possible height is around 4000m for germany
; --> horizon angle = arctan(4/75) ~ 3°, this is the lowest category in the richter class table
HORIZON_RADIUS = 75000

; The projected coordinate reference system (CRS) to use for the calculation of the distance during the horizon shadowing calculation
; This can be different than the DEM CRS, but has to be a projected CRS with meter as unit
; The value should be an EPSG code, e.g. 25832 for UTM zone 32N
; The default is UTM zone 32N (EPSG:25832)
HORIZON_CRS = 25832

; The projected coordinate reference system (CRS) to use for the calculation of the distance during raster sampling
; This can be different than the DEM CRS, but has to be a projected CRS with meter as unit
; The value should be an EPSG code, e.g. 25832 for UTM zone 32N
; The default is the same as the HORISON_CRS
RASTER_BUFFER_CRS = ${weatherdb:HORIZON_CRS}

; The minimum date to download data from the DWD
; The earlier you go the less data is available and the further away the stations have to be to fill the timeseries
; The default is 1999-01-01
MIN_DATE = 1999-01-01

[weatherdb:LINEAR_INTERPOLATION_LIMIT]
; When there are still NAs after filling with neighboring stations, the module can use linear interpolation to fill the gaps
; The limit defines the maximum interval that is allowed to fill with linear interpolation
; The value is given with a unit, e.g. 3 days, 30 minutes, 1 hour
; For further explanation about the format see https://www.postgresql.org/docs/current/datatype-datetime.html#DATATYPE-INTERVAL-INPUT
; for precipitation, where the timeseries resolution is 10 minutes, 30 minutes means 3 missing values are interpolated, but not more.
; If there shouldn't be any linear interpolation, set the limit to 0
; For precipitation, the default is 1 hour
P = 1 hour
; For temperature, the default is 2 days
T = 2 days
; For Evapotranspiration, the default is 2 days
ET = 2 days


[weatherdb:max_fillup_distance]
; The maximum distance in meters to use for the filling of the station data
; For each parameter (P, T, ET) the module uses a different distance
; Precipitation (P)
P = 130000
; Temperature (T)
T = 150000
; Evapotranspiration (ET)
ET = 150000


[system:parallel_processes]
; You can configure how many processes are getting started in parrallel when tghe database is updated.
; depending on your system, the database can handle more or less processes
; There  are 2 possible ways to configure this.
; either define the absolute number of processes:
; ABSOLUTE =

; or define the number of processes in relation to the number of CPUs,
; by defining how many CPUs should be used less than the maximum available CPUs
; if the absolute number is defined, the relative number is ignored
; This is the default setting of cpu count -1
CPU_COUNT_MINUS = 1


; for developpers:
; ----------------
;
; [alembic]
; The database connection used by the alembic scripts
; connection = main